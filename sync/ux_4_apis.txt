UX 4 APIs

Description: Why a team writing HTTP services still needs to consider UX.

Outline

* Intro
* Who are the Users of an API?
* Improving the User Experience
* Conclusion


Intro
-----

* When I started as a dev on an Asynchrony delivery team, I was excited to discover that I would have the opportunity to work directly with talented UX experts.  This would have been a luxury at other places where I had developed software, as we did not have easy access to these masters of design, layout, font, colors, and human-computer interaction.  In reality, many of our UI decisions were based on comments like, "I think I may remember reading about how this should behave in that Don't Make me Think (https://en.wikipedia.org/wiki/Don%27t_Make_Me_Think) book".  Because we can consult with these UX professionals here, the single page apps and mobile apps (and Apple TV apps!) we create offer the user with a far greater user experience.  However, I am now a dev on Han Shot First -- a team that creates HTTP services as a backend for mobile and web apps.  Although we do not have a traditional front-end, does our API-oriented team need to be concerned with UX?  As it turns out, the answer is "yes"!


Who are our API Users?
----------------------

One might argue that without the typical user interface, there is no need to consider the user experience.  However, although a large part of REST API design is focused around enabling computer-to-computer interoperability among components in a distributed system, there is also an important element of human-computer interaction.  A user interface (UI) is not limited to a web UI or mobile UI, but also includes the application programming interface (API).  The users of an API are not the employees at the customer site, nor are they the people using their mobile device to browse for shoes or order a pizza.  For our API team, the users are devs from other Asynchrony teams (such as the mobile devs of Team of the Future and the desktop client and web devs of Leviathan), QAs that test our API, the customer's QA team, and the group of Asynchronites responsible for deploying the API into production at the customer site.  As we design and implement our API, we must think in terms of how these individuals will use the API and also anticipate constraints, in order to ensure a positive user experience.


Let's Improve the UX!
---------------------

We can improve the UX of our API by adhering to the HTTP spec, by following REST conventions and best-practices that client devs are familiar with, and by effectively communicating with our users.

  * Adhere to the HTTP spec
    - HTTP provides a "uniform interface", where the verbs (GET, PUT, POST, DELETE, HEAD, PATCH, etc.) are intended to be used for very specific actions.
	- Ex: GET and PUT should be idempotent, which means the dev or QA using the API will assume that whether he or she makes the following request once or 300,000 times, the end state of the resource will be the same:  PUT /api/v1/orders/7
	      In other words, PUT'ing order #7 300,000 times should never result in 300,000 new resources being created!
    - In order to improve the UX, we should also be in the habit of leveraging the diverse range of status codes provided by HTTP (https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html), and return the right HTTP status code for the specific scenario.  On Han Shot First, we recently completed a story to ensure that if a dev or QA makes an HTTP request that includes an invalid Content-Type header (such as "text/plain" instead of "application/json"), our API will not return a 500 Internal Server Error, but instead point the user in the right troubleshooting direction by returning a 415 Unsupported Media Type.  Because the 415 error code is in the "client error" range of 400-499, the user immediately knows there is a mistake that they can correct, instead of being mislead into believing that a server error occurred that is out of their control. 
  * Because HTTP is a protocol between clients and resources, we should create URIs that behave like resources, such as /api/v1/cars/1 instead of using URIs that encourage an remote procedure call (RPC) style of client experience, like /api/v1/addNewCar.  In other words, a resource should feel like a noun and not a verb.

We can also enhance the user experience by following REST best practices and patterns.
   * We must be cautious to avoid creating an API that is so different that it confuses our users (https://en.wikipedia.org/wiki/Principle_of_least_astonishment).  
   * One pattern we follow on Han Shot First is to use the pattern of a collection resource.  In a collection resource, we use a URL to represent an entire collection of HTTP resources.
     - For example, to create a new order, an API could support the following endpoint:
             POST  api/v1/orders
       The user would send JSON representation of an order as the HTTP request body, and the API would return an HTTP status code of 201 Created.  The API would also include the URL of the newly-generated order resource in the Location response header (Location: http://<host>/api/v1/orders/66).
	   
     - The user can immediately retrieve the created order by performing a GET request on that returned URL:
	         GET api/v1/orders/66

     - The user can also perform a GET on the collection resource itself to retrieve all the orders:
	         GET api/v1/orders
     
     - Finally, the user can perform filtering by appending query parameters onto the collection resource URL:
	         GET api/v1/orders?term=nachos&type=domestic

We must be careful to not fall into the trap of assuming that just because a specific HTTP/REST library allows us to create a specific type of URL or payload, and supports using the HTTP verbs in specific scenarios, that this automatically translates to a well-designed interface that offers a great UX to our devs and QAs.  It is important to rise up one level of abstraction to ensure that the API doesn't provide any unexpected surprises.  We should ask: 
  * Does the endpoint provide valid status codes?
  * Does it follow best practices with respect to headers?
  * Does the API erroneously report that client errors are actually server errors?
  * Does the API have a stateless nature that allows the deployment team to easily run it on multiple nodes?

  * Example:  Using the Express framework, a route can be added using the following syntax:
      app.get('/api/v1/addNewOrder', function (req, res) {
          // Code to persist the new order to a data store
      });
	However, from an HTTP perspective, this GET request would be neither safe (it modifies resource state) nor idempotent (replaying the request would cause an order to be created each time).  Just because we can do it doesn't mean we should do it.
  
A great way to ensure a good UX is to continuously improve communication between the API team and the API users.
  * On Han Shot First, we have the luxury of being co-located with our users, so the devs and QAs of our team can easily meet face-to-face with the devs and QAs from the other teams that utilize our API.
    - Ex: Earlier this week, Leviathan devs requested that we restructure the JSON payload response body of one of our endpoints in order to reduce confusion and improve ease-of-use.
  * Good API docs
    - Should be easy to find
	- Should indicate the HTTP verb, the URL and any URL parameters, and give a clear description of the payload
	- Swagger

  
--------------------------------------------------------------------------------------------------------------------------  
  
  
* UX
  - design master
  - palates/colors/layout/font/responsive/etc.
  - Ease of use/efficiency
* UI (User Interface) (Does not have to be graphical UI, web UI, or mobile UI, HTTP services still count!!)
  - One might argue that without the typical user interface, there is no need to consider the user experience
  - Although a large part of REST API design is focused around enabling computer-to-computer interoperability among components in a distributed system, there is also an important element of human-computer interaction.
  - Users (devs from our team, devs from other Asynchrony teams, QAs, deployment team, client QA team, even HTTP proxy servers!)
  - interface (HTTP is between client and resource (look up details).  Bounded context, protocols, (highly cohesive, loosely coupled modules)
* meme image
* It's easy to fall into the trap of assuming that just because your HTTP/REST library allows you to create a specific type of URL or payload, and supports using the HTTP GET verb in specific scenarios, that this automatically translates to a well-designed and usable interface.  Don't just assume that if your HTTP/REST library supports it, that it adheres to the HTTP spec, and that it will provide the client developers and testers a good experience.  You need to also rise up one level of abstraction to ensure that it doesn't provide any unnecessary surprises.  Does it provide valid status codes, does it follow best practices with respect to headers, does it adhere to the uniform interface of HTTP, is it stateless, does it easily allow the deployment team to easily run it on multiple nodes?
* Include "Where HTTP Fits In" diagram.  The users interact with the application protocol
* Need for good documentation (that is also easy to find).
* Include quote from Effective Java about the client being a user for the API you are creating.  (While coding, think in terms of API design, where your user is another programmer.)
* Include scan of "Tokens!" drawing.  (For more details, join the LnL.  Coming Soon!)
* Mention upcoming LnL


